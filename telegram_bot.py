# telegram_bot.py

"""
Telegram –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é.
"""

import os
import json
import logging
import re
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler
from telegram.ext import ContextTypes, filters, ConversationHandler
from session_manager import SessionManager
from characters import get_character
from llm_provider import list_available_providers

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ ConversationHandler
ADDING_MEMORY = 2
SETTING_IMPORTANCE = 3
SELECTING_RELATIONSHIP = 4
CHANGING_RELATIONSHIP = 5

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
session_manager = SessionManager()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = str(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    agent = session_manager.get_agent_for_user(user_id)
    character_name = agent.character_name
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏. "
        f"–°–µ–π—á–∞—Å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º {character_name}.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ. "
        f"–ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö."
    )
    
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/character [–∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞] - –°–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "/characters - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n"
        "/model [–ø—Ä–æ–≤–∞–π–¥–µ—Ä] [–º–æ–¥–µ–ª—å] - –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª—å LLM\n"
        "/relationship - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –≤–∞–º\n"
        "/memories - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç—å—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "/clear_memory - –û—á–∏—Å—Ç–∏—Ç—å —ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å\n"
        "/save - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "/providers - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        "/character –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞\n"
        "/model openai gpt-4o-mini - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –º–æ–¥–µ–ª—å OpenAI GPT-4o-mini\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —Ç–µ–∫—É—â–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º."
    )
    
    await update.message.reply_text(help_text)

async def characters_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /characters - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    available_characters = session_manager.get_available_characters()
    
    characters_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:\n\n"
    
    for name, desc in available_characters:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–ø–æ—Ö–∏
        character = get_character(name)
        era = character.era if hasattr(character, 'era') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —ç–ø–æ—Ö–∞"
        
        characters_text += f"‚Ä¢ {name} ({era})\n"
        characters_text += f"  {desc}\n\n"
    
    characters_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /character [–∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞] –¥–ª—è —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."
    
    await update.message.reply_text(characters_text)

async def providers_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /providers - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    available_providers = list_available_providers()
    
    providers_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:\n\n"
    
    for provider, info in available_providers.items():
        providers_text += f"‚Ä¢ {provider.upper()}: {info['description']}\n"
        providers_text += "  –ú–æ–¥–µ–ª–∏:\n"
        
        for model in info['models']:
            providers_text += f"  - {model}\n"
        
        providers_text += "\n"
    
    providers_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /model [–ø—Ä–æ–≤–∞–π–¥–µ—Ä] [–º–æ–¥–µ–ª—å] –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏."
    
    await update.message.reply_text(providers_text)

async def character_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /character [–∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞]"""
    user_id = str(update.effective_user.id)
    args = context.args
    
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    if not args:
        available_characters = session_manager.get_available_characters()
        character_list = "–î–ª—è —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤–≤–µ–¥–∏—Ç–µ: /character [–∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞]\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:\n"
        
        for name, _ in available_characters:
            character_list += f"‚Ä¢ {name}\n"
        
        await update.message.reply_text(character_list)
        return
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character_name = " ".join(args)
    
    # –ú–µ–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if session_manager.change_character(user_id, character_name):
        await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º {character_name}.")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º
        available_characters = session_manager.get_available_characters()
        character_names = [name for name, _ in available_characters]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–µ–µ –∏–º—è (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        possible_matches = [name for name in character_names 
                           if character_name.lower() in name.lower()]
        
        if possible_matches:
            suggestion_text = "–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n"
            for name in possible_matches:
                suggestion_text += f"‚Ä¢ {name}\n"
            
            await update.message.reply_text(suggestion_text)
        else:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /characters –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."
            )

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /model [–ø—Ä–æ–≤–∞–π–¥–µ—Ä] [–º–æ–¥–µ–ª—å]"""
    user_id = str(update.effective_user.id)
    args = context.args
    
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    if not args or len(args) < 2:
        await update.message.reply_text(
            "–î–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ: /model [–ø—Ä–æ–≤–∞–π–¥–µ—Ä] [–º–æ–¥–µ–ª—å]\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /model openai gpt-4o-mini\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /providers –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π."
        )
        return
    
    provider_name = args[0].lower()
    model_name = args[1]
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã, —Å–æ–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(args) > 2:
        model_name = " ".join(args[1:])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    available_providers = list_available_providers()
    if provider_name not in available_providers:
        provider_list = ", ".join(available_providers.keys())
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–∞–π–¥–µ—Ä '{provider_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {provider_list}"
        )
        return
    
    # –ú–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    agent = session_manager.get_agent_for_user(user_id)
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã LLM
        success = agent.setup_llm(provider_name=provider_name, model_name=model_name)
        
        if success:
            await update.message.reply_text(
                f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {provider_name.upper()}/{model_name}."
            )
        else:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏: {str(e)}")

async def show_relationship(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /relationship"""
    user_id = str(update.effective_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    agent = session_manager.get_agent_for_user(user_id)
    relationship_status = agent.get_relationship_status()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
    character_name = agent.character_name
    overall = relationship_status['overall']
    rapport = relationship_status['rapport_value']
    
    relationship_text = f"–û—Ç–Ω–æ—à–µ–Ω–∏–µ {character_name} –∫ –≤–∞–º: {overall} (—É—Ä–æ–≤–µ–Ω—å: {rapport:.2f})\n\n"
    
    # –ê—Å–ø–µ–∫—Ç—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    relationship_text += "–ê—Å–ø–µ–∫—Ç—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π:\n"
    aspects = {
        "respect": "–£–≤–∞–∂–µ–Ω–∏–µ",
        "trust": "–î–æ–≤–µ—Ä–∏–µ",
        "liking": "–°–∏–º–ø–∞—Ç–∏—è",
        "patience": "–¢–µ—Ä–ø–µ–Ω–∏–µ"
    }
    
    for aspect, title in aspects.items():
        value = relationship_status['aspect_values'].get(aspect, 0)
        desc = relationship_status['aspects'].get(aspect, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ")
        relationship_text += f"‚Ä¢ {title}: {desc} ({value:.2f})\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    last_change = relationship_status.get('last_change')
    if last_change:
        when = last_change.get('when')
        reason = last_change.get('reason')
        relationship_text += f"\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:\n{reason}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    keyboard = [[InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="modify_relationship")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        relationship_text,
        reply_markup=reply_markup
    )

async def modify_relationship_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å–ø–µ–∫—Ç–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    keyboard = [
        [InlineKeyboardButton("–û–±—â–µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ", callback_data="relationship_rapport")],
        [InlineKeyboardButton("–£–≤–∞–∂–µ–Ω–∏–µ", callback_data="relationship_respect")],
        [InlineKeyboardButton("–î–æ–≤–µ—Ä–∏–µ", callback_data="relationship_trust")],
        [InlineKeyboardButton("–°–∏–º–ø–∞—Ç–∏—è", callback_data="relationship_liking")],
        [InlineKeyboardButton("–¢–µ—Ä–ø–µ–Ω–∏–µ", callback_data="relationship_patience")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="relationship_cancel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Å–ø–µ–∫—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    
    return SELECTING_RELATIONSHIP

async def relationship_aspect_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞—Å–ø–µ–∫—Ç–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "relationship_cancel":
        await query.edit_message_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Å–ø–µ–∫—Ç –∏–∑ callback_data
    aspect = callback_data.replace("relationship_", "")
    context.user_data['selected_aspect'] = aspect
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–°–∏–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å (+0.3)", callback_data="change_0.3")],
        [InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å (+0.1)", callback_data="change_0.1")],
        [InlineKeyboardButton("–ù–µ–º–Ω–æ–≥–æ —É–ª—É—á—à–∏—Ç—å (+0.05)", callback_data="change_0.05")],
        [InlineKeyboardButton("–ù–µ–º–Ω–æ–≥–æ —É—Ö—É–¥—à–∏—Ç—å (-0.05)", callback_data="change_-0.05")],
        [InlineKeyboardButton("–£—Ö—É–¥—à–∏—Ç—å (-0.1)", callback_data="change_-0.1")],
        [InlineKeyboardButton("–°–∏–ª—å–Ω–æ —É—Ö—É–¥—à–∏—Ç—å (-0.3)", callback_data="change_-0.3")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="change_cancel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    aspect_names = {
        "rapport": "–æ–±—â–µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ",
        "respect": "—É–≤–∞–∂–µ–Ω–∏–µ",
        "trust": "–¥–æ–≤–µ—Ä–∏–µ",
        "liking": "—Å–∏–º–ø–∞—Ç–∏—è",
        "patience": "—Ç–µ—Ä–ø–µ–Ω–∏–µ"
    }
    
    aspect_name = aspect_names.get(aspect, aspect)
    
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å {aspect_name}:",
        reply_markup=reply_markup
    )
    
    return CHANGING_RELATIONSHIP

async def change_relationship(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    callback_data = query.data
    
    if callback_data == "change_cancel":
        await query.edit_message_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ–ª–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ callback_data
    change = float(callback_data.replace("change_", ""))
    aspect = context.user_data.get('selected_aspect')
    
    if not aspect:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –∞—Å–ø–µ–∫—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–π.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    agent = session_manager.get_agent_for_user(user_id)
    success = agent.update_relationship_manually(aspect, change)
    
    aspect_names = {
        "rapport": "–û–±—â–µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ",
        "respect": "–£–≤–∞–∂–µ–Ω–∏–µ",
        "trust": "–î–æ–≤–µ—Ä–∏–µ",
        "liking": "–°–∏–º–ø–∞—Ç–∏—è",
        "patience": "–¢–µ—Ä–ø–µ–Ω–∏–µ"
    }
    
    aspect_name = aspect_names.get(aspect, aspect)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        status = agent.get_relationship_status()
        new_value = status['rapport_value'] if aspect == 'rapport' else status['aspect_values'].get(aspect, 0)
        
        direction = "—É–ª—É—á—à–µ–Ω–æ" if change > 0 else "—É—Ö—É–¥—à–µ–Ω–æ"
        await query.edit_message_text(
            f"{aspect_name} {direction} –Ω–∞ {abs(change):.2f}. –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value:.2f}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        memory_text = f"[–†—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è]: {aspect_name} –±—ã–ª–æ {direction} –Ω–∞ {abs(change):.2f}"
        agent.add_episodic_memory(memory_text, importance=0.7, category="–æ—Ç–Ω–æ—à–µ–Ω–∏—è")
    else:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π.")
    
    return ConversationHandler.END

async def memories_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /memories"""
    user_id = str(update.effective_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ —ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    agent = session_manager.get_agent_for_user(user_id)
    memories = agent.get_episodic_memories(sort_by="importance")
    
    if not memories:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        keyboard = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_memory")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–£ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–∫–∞ –Ω–µ—Ç —ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
            reply_markup=reply_markup
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    memory_text = f"–≠–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è {agent.character_name}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    show_count = min(10, len(memories))
    for i, memory in enumerate(memories[:show_count]):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Å–æ–∫—Ä–∞—â–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
        text = memory["text"]
        if len(text) > 100:
            text = text[:97] + "..."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        timestamp = memory.get("timestamp", "")
        if timestamp:
            try:
                dt = datetime.fromisoformat(timestamp)
                timestamp = dt.strftime("%d.%m.%Y %H:%M")
            except:
                pass
        
        importance = memory.get("importance", 0)
        category = memory.get("category", "–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        memory_text += f"{i+1}. [{timestamp}] {text}\n"
        memory_text += f"   –í–∞–∂–Ω–æ—Å—Ç—å: {importance:.2f}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
    
    if len(memories) > show_count:
        memory_text += f"(–ø–æ–∫–∞–∑–∞–Ω–æ {show_count} –∏–∑ {len(memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π)\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_memory")],
        [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data="clear_memory")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        memory_text,
        reply_markup=reply_markup
    )

async def start_add_memory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂—É:"
    )
    
    return ADDING_MEMORY

async def memory_text_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    memory_text = update.message.text
    context.user_data['memory_text'] = memory_text
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏
    keyboard = [
        [InlineKeyboardButton("–û—á–µ–Ω—å –≤–∞–∂–Ω–æ–µ (0.9)", callback_data="importance_0.9")],
        [InlineKeyboardButton("–í–∞–∂–Ω–æ–µ (0.7)", callback_data="importance_0.7")],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω–µ–µ (0.5)", callback_data="importance_0.5")],
        [InlineKeyboardButton("–ú–∞–ª–æ–≤–∞–∂–Ω–æ–µ (0.3)", callback_data="importance_0.3")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="importance_cancel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )
    
    return SETTING_IMPORTANCE

async def memory_importance_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    callback_data = query.data
    
    if callback_data == "importance_cancel":
        await query.edit_message_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –∏–∑ callback_data
    importance = float(callback_data.replace("importance_", ""))
    memory_text = context.user_data.get('memory_text', "")
    
    if not memory_text:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    agent = session_manager.get_agent_for_user(user_id)
    agent.add_episodic_memory(memory_text, importance=importance)
    
    await query.edit_message_text(
        f"–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É {agent.character_name} —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é {importance:.1f}."
    )
    
    return ConversationHandler.END

async def clear_memory_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_memory - –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_memory_confirmed")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="clear_memory_cancel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=reply_markup
    )

async def clear_memory_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_memory_confirmed")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="clear_memory_cancel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=reply_markup
    )

async def clear_memory_execute(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    user_id = str(query.from_user.id)
    
    if callback_data == "clear_memory_cancel":
        await query.edit_message_text("–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ –æ—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
    agent = session_manager.get_agent_for_user(user_id)
    count = agent.clear_episodic_memories()
    
    await query.edit_message_text(
        f"–≠–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {agent.character_name} –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {count} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π."
    )

async def save_state(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /save"""
    user_id = str(update.effective_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    agent = session_manager.get_agent_for_user(user_id)
    agent.save_state()
    
    await update.message.reply_text(
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {agent.character_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    message_text = update.message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action='typing'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    try:
        response = session_manager.process_message(user_id, message_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç—è–º, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(response) > 4000:
            chunks = [response[i:i+4000] for i in range(0, len(response), 4000)]
            for chunk in chunks:
                await update.message.reply_text(chunk)
        else:
            await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def periodic_save() -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
    while True:
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
        session_manager.save_all_sessions()
        logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π")

async def post_init(application: Application) -> None:
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    application.create_task(periodic_save())
    logger.info("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).post_init(post_init).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    memory_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_add_memory, pattern=r'^add_memory$')],
        states={
            ADDING_MEMORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, memory_text_received)],
            SETTING_IMPORTANCE: [CallbackQueryHandler(memory_importance_selected, pattern=r'^importance_')]
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)],
        per_chat=True
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    relationship_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(modify_relationship_start, pattern=r'^modify_relationship$')],
        states={
            SELECTING_RELATIONSHIP: [CallbackQueryHandler(relationship_aspect_selected, pattern=r'^relationship_')],
            CHANGING_RELATIONSHIP: [CallbackQueryHandler(change_relationship, pattern=r'^change_')]
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)],
        per_chat=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("character", character_command))
    application.add_handler(CommandHandler("relationship", show_relationship))
    application.add_handler(CommandHandler("memories", memories_command))
    application.add_handler(CommandHandler("save", save_state))
    application.add_handler(CommandHandler("characters", characters_command))
    application.add_handler(CommandHandler("providers", providers_command))
    application.add_handler(CommandHandler("clear_memory", clear_memory_command))
    application.add_handler(CommandHandler("model", model_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    application.add_handler(memory_conv_handler)
    application.add_handler(relationship_conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(clear_memory_confirm, pattern=r'^clear_memory$'))
    application.add_handler(CallbackQueryHandler(clear_memory_execute, pattern=r'^clear_memory_'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()